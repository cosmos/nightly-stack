name: "Build application"

on:
  workflow_call:
    inputs:
      appsToBuild:
        required: false
        type: string
        default: ""
      depsUpdate:
        required: false
        type: boolean
        default: false
      publishArtifacts:
        required: false
        type: boolean
        default: false
      sendNotifications:
        required: false
        default: false
        type: boolean
  push:

jobs:
  prepare:
    name: Prepare to Build
    runs-on: ubuntu-latest
    outputs:
      matrices: ${{ steps.prepare-matrices.outputs.matrices }}
    steps:
      - name: Lowercase repository owner
        shell: bash
        run: echo "LOWERCASE_REPO_OWNER=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      # - name: Generate Token
      #   uses: actions/create-github-app-token@v1
      #   id: app-token
      #   with:
      #     app-id: "${{ secrets.BOT_APP_ID }}"
      #     private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: "${{ steps.app-token.outputs.token }}"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x
          cache: pip

      - name: Install Python Requirements
        shell: bash
        run: pip install -r ./.github/scripts/requirements.txt && pip freeze

      - name: Prepare Matrices
        id: prepare-matrices
        env:
          TOKEN: ${{ steps.app-token.outputs.token }}
        shell: bash
        run: |
          set -x
          if [[ -z "${{ inputs.appsToBuild }}" ]]; then
              matrices=$(python ./.github/scripts/prepare-matrices.py "all" "${{ inputs.publishArtifacts }}")
          else
            matrices=$(python ./.github/scripts/prepare-matrices.py "${{ inputs.appsToBuild }}" "${{ inputs.publishArtifacts }}")
          fi
          echo "matrices=${matrices}" >> $GITHUB_OUTPUT
          echo "${matrices}"

  build-platform-app:
    name: Build/Test ${{ matrix.app.name }} (${{ matrix.app.platform }})
    needs: prepare
    runs-on: ubuntu-latest
    if: ${{ toJSON(fromJSON(needs.prepare.outputs.matrices).appPlatforms) != '[]' && toJSON(fromJSON(needs.prepare.outputs.matrices).appPlatforms) != '' }}
    outputs:
      date: ${{ steps.archive.outputs.date }}
    strategy:
      fail-fast: false
      matrix:
        app: "${{ fromJSON(needs.prepare.outputs.matrices).appPlatforms }}"
    permissions:
      contents: read
      packages: write
    steps:
      - name: Log Matrix Input
        shell: bash
        run: |
          cat << EOF
          ${{ toJSON(matrix.app)}}
          EOF
      - uses: actions/checkout@v4
        with:
          repository: ${{ matrix.app.repository }}
          ref: ${{ matrix.app.branch }}
          token: ${{ github.token }}
          path: ${{ matrix.app.repository }}

      - uses: actions/checkout@v4
        with:
          path: nightly-stack

      - uses: actions/setup-go@v5
        with:
          go-version: "1.23"
          check-latest: true

      - name: Update go modules
        # Disable dependencies updates for v0.52.x
        if: matrix.major-version != 'v0.52.x'
        run: |
          set -x
          ls -l
          ls -l ../
          ls -l ../../
          cd ${{ matrix.app.repository }}/${{ matrix.app.path }}
          COSMOSSDK_BRANCH=${{ matrix.app.branch }} ../../nightly-stack/.github/scripts/update-go-modules.sh

      - name: show output of modified go.sum and go.mod
        run: |
          echo "############"
          echo "# go.mod"
          echo "############"
          cat ${{ matrix.app.repository }}/${{ matrix.app.path }}/go.mod
          echo -e "\n\n"
          echo "############"
          echo "# go.mod"
          echo "############"
          cat ${{ matrix.app.repository }}/${{ matrix.app.path }}/go.sum

      - name: Create application binary
        id: build
        run: |
          cd ${{ matrix.app.repository }}/${{ matrix.app.path }}
          go mod tidy
          cd ../
          GOARCH=${{ matrix.app.target_arch }} ${{ matrix.app.build_command }}
          echo "gobin=$(go env GOPATH)/bin" >> $GITHUB_OUTPUT

      - name: Run and monitor application
        shell: bash
        # no arm64 runners as of now : https://github.com/orgs/community/discussions/19197
        if: ${{ matrix.app.target_arch == 'amd64' }}
        run: |
          set -oue pipefail
          set -x

          # Set the timeout to 60 seconds
          TIMEOUT=60
          START_TIME=$(date +%s)

          cd cosmos-sdk
          make init-simapp
          simd start > ./output.log 2>1 &
          APP_PID=$!


          while true; do
            CURRENT_TIME=$(date +%s)
            ELAPSED_TIME=$((CURRENT_TIME - START_TIME))

            if [ $ELAPSED_TIME -ge $TIMEOUT ]; then
              echo "Timeout reached. Application did not produce the success pattern within 60 seconds."
              kill $APP_PID
              cat ./output.log
              exit 1
            fi

            # Check that 4th block is produced to validate the application
            if simd query block-results 4; then
              echo "Block #4 has been committed. Application is working correctly."
              kill $APP_PID
              exit 0
            else
              echo "Block height is not greater than 4."
            fi

            sleep 3
          done

      - name: Create archive
        id: archive
        run: |
          set -oue pipefail
          set -x

          # Create archive
          SIMD_PATH=$(find $(go env GOPATH)/bin | tail -n 1)
          mv $SIMD_PATH ${{ github.workspace }}/${{ env.RELEASE_NAME }}-${{ matrix.major-version }}-$date-${{ matrix.go-arch }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.RELEASE_NAME }}-${{ matrix.major-version }}-${{ env.date }}-${{ matrix.go-arch }}
          path: ${{ github.workspace }}/${{ env.RELEASE_NAME }}-${{ matrix.major-version }}-${{ env.date }}-${{ matrix.go-arch }}
          retention-days: 10

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: "${{ github.actor }}"
          password: "${{ secrets.GITHUB_TOKEN }}"

      - name: Setup Goss
        if: ${{ matrix.go-arch == 'amd64' }}
        uses: e1himself/goss-installation-action@v1
        with:
          version: v0.4.4

      - name: Lowercase repository owner
        shell: bash
        run: echo "LOWERCASE_REPO_OWNER=${GITHUB_REPOSITORY_OWNER,,}" >> "${GITHUB_ENV}"

      - name: Prepare Build Outputs
        id: prepare-build-outputs
        shell: bash
        run: |
          image_name="ghcr.io/${{ env.LOWERCASE_REPO_OWNER }}/${{ env.RELEASE_NAME }}"
          outputs="type=image,name=${image_name},push-by-digest=true,name-canonical=true,push=true"

          echo "image_name=${image_name}" >> $GITHUB_OUTPUT
          echo "outputs=${outputs}" >> $GITHUB_OUTPUT

      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.RELEASE_NAME }}-${{ matrix.major-version }}-${{ env.date }}-${{ matrix.go-arch }}
          path: nightly-stack/containers/cosmos-sdk

      - name: Build Image
        uses: docker/build-push-action@v6
        id: build-image
        with:
          build-args: |-
            BINARY=${{ env.RELEASE_NAME }}-${{ matrix.major-version }}-${{ env.date }}-${{ matrix.go-arch }}
          context: ./nightly-stack/containers/cosmos-sdk
          file: ./nightly-stack/containers/cosmos-sdk/Dockerfile
          platforms: ${{ matrix.go-arch }}
          outputs: ${{ steps.prepare-build-outputs.outputs.outputs }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |-
            org.opencontainers.image.title=${{ steps.prepare-build-outputs.outputs.image_name }}
            org.opencontainers.image.url=https://ghcr.io/${{ env.LOWERCASE_REPO_OWNER }}/${{ steps.prepare-build-outputs.outputs.image_name }}
            org.opencontainers.image.source=https://github.com/${{ env.LOWERCASE_REPO_OWNER }}/containers
            org.opencontainers.image.version=${{ matrix.major-version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.vendor=${{ env.LOWERCASE_REPO_OWNER }}

      - name: Run Goss Tests
        id: dgoss
        if: ${{ matrix.go-arch == 'amd64' }}
        env:
          CONTAINER_RUNTIME: docker
          GOSS_FILES_PATH: ${{ github.workspace }}/nightly-stack/containers/cosmos-sdk/ci
          GOSS_OPTS: --retry-timeout 60s --sleep 2s --color --format documentation
          GOSS_SLEEP: 2
          GOSS_FILES_STRATEGY: cp
          CONTAINER_LOG_OUTPUT: goss_container_log_output
        shell: bash
        run: |
          set -x
          ls -l ${{ github.workspace }}/nightly-stack/containers/cosmos-sdk/ci/goss.yaml
          image_name="${{ steps.prepare-build-outputs.outputs.image_name }}@${{ steps.build-image.outputs.digest }}"
          dgoss run ${image_name}

      - name: Export Digest
        id: export-digest
        shell: bash
        run: |
          mkdir -p /tmp/${{ env.RELEASE_NAME }}/digests
          digest="${{ steps.build-image.outputs.digest }}"
          echo "${{ env.RELEASE_NAME }}" > "/tmp/${{ env.RELEASE_NAME }}/digests/${digest#sha256:}"

      - name: Upload Digest
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.RELEASE_NAME }}-${{ matrix.major-version }}-${{ matrix.go-arch }}
          path: /tmp/${{ env.RELEASE_NAME }}/*
          if-no-files-found: error
          retention-days: 1