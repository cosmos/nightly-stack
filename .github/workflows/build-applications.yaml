name: "Build application"

on:
  workflow_call:
    inputs:
      appsToBuild:
        required: false
        type: string
        default: ""
      depsUpdate:
        required: false
        type: boolean
        default: false
      publishArtifacts:
        required: false
        type: boolean
        default: false
      sendNotifications:
        required: false
        default: false
        type: boolean

jobs:
  prepare:
    name: Prepare to Build
    runs-on: ubuntu-latest
    outputs:
      matrices: ${{ steps.prepare-matrices.outputs.matrices }}
    steps:
      - name: Lowercase repository owner
        shell: bash
        run: echo "LOWERCASE_REPO_OWNER=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Setup Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5
        with:
          python-version: 3.x
          cache: pip

      - name: Install Python Requirements
        shell: bash
        run: pip install -r ./.github/scripts/requirements.txt && pip freeze

      - name: Prepare Matrices
        id: prepare-matrices
        env:
          TOKEN: ${{ steps.app-token.outputs.token }}
        shell: bash
        run: |
          set -x
          if [[ -z "${{ inputs.appsToBuild }}" ]]; then
              matrices=$(python ./.github/scripts/prepare-matrices.py "all" "${{ inputs.publishArtifacts }}")
          else
            matrices=$(python ./.github/scripts/prepare-matrices.py "${{ inputs.appsToBuild }}" "${{ inputs.publishArtifacts }}")
          fi
          echo "matrices=${matrices}" >> $GITHUB_OUTPUT
          echo "${matrices}"

  build-platform-app:
    name: "Build ${{ matrix.app.name }} ${{ matrix.app.channel }} (${{ matrix.app.platform }})"
    needs: prepare
    runs-on: ubuntu-latest
    if: ${{ toJSON(fromJSON(needs.prepare.outputs.matrices).appsPlatforms) != '[]' && toJSON(fromJSON(needs.prepare.outputs.matrices).appsPlatforms) != '' }}
    strategy:
      fail-fast: false
      matrix:
        app: "${{ fromJSON(needs.prepare.outputs.matrices).appsPlatforms }}"
    permissions:
      contents: read
      packages: write
    steps:
      - name: Log Matrix Input
        shell: bash
        run: |
          cat << EOF
          ${{ toJSON(matrix.app)}}
          EOF
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          repository: ${{ matrix.app.repository }}
          ref: ${{ matrix.app.branch }}
          token: ${{ github.token }}
          path: ${{ matrix.app.repository }}
          fetch-depth: ${{ matrix.app.fetch_full_history && '0' || '1' }}

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          path: nightly-stack

      - uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5
        with:
          go-version: "1.23"
          check-latest: true

      - name: Install build dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y build-essential libsqlite3-dev

      - name: Update go modules
        if: ${{ matrix.app.update_modules_enabled }}
        run: |
          set -x
          cd ${{ matrix.app.repository }}/${{ matrix.app.path }}
          COSMOSSDK_BRANCH=${{ matrix.app.update_modules_branch }} ${{ github.workspace }}/nightly-stack/.github/scripts/update-go-modules.sh

      - name: show output of modified go.sum and go.mod
        if: ${{ matrix.app.update_modules_enabled }}
        run: |
          echo "############"
          echo "# go.mod"
          echo "############"
          cat ${{ matrix.app.repository }}/${{ matrix.app.path }}/go.mod
          echo -e "\n\n"
          echo "############"
          echo "# go.mod"
          echo "############"
          cat ${{ matrix.app.repository }}/${{ matrix.app.path }}/go.sum

      - name: register cosmossdk and cometbft versions
        id: modules_versions
        run: |
          set -x
          cd ${{ matrix.app.repository }}/${{ matrix.app.path }}
          COSMOSSDK_VERSION=$(go list -m -f '{{.Version}}' github.com/cosmos/cosmos-sdk)
          COMETBFT_VERSION=$(go list -m -f '{{.Version}}' github.com/cometbft/cometbft)
          echo "cosmossdk=${COSMOSSDK_VERSION}" >> $GITHUB_OUTPUT
          echo "cometbft=${COMETBFT_VERSION}" >> $GITHUB_OUTPUT

      - name: Create application binary
        id: build
        env:
          MATRIX_APP_REPOSITORY: ${{ matrix.app.repository }}
          MATRIX_APP_PATH: ${{ matrix.app.path }}
          GOARCH: ${{ matrix.app.target_arch }}
          BINARY_NAME: ${{ matrix.app.binary_name }}
        run: ./nightly-stack/apps/${{ matrix.app.name }}/ci/build.sh

      - name: Run and monitor application
        shell: bash
        # no arm64 runners as of now : https://github.com/orgs/community/discussions/19197
        if: ${{ matrix.app.tests_enabled }}
        env:
          MATRIX_APP_REPOSITORY: ${{ matrix.app.repository }}
          MATRIX_APP_PATH: ${{ matrix.app.path }}
          GOARCH: ${{ matrix.app.target_arch }}
          BINARY_NAME: ${{ matrix.app.binary_name }}
          BINARY_BUILD_OUTPUT_PATH: ${{ matrix.app.repository }}/${{ matrix.app.binary_build_output_path }}
        run: ./nightly-stack/apps/${{ matrix.app.name }}/ci/test.sh

      - name: Export Build Result
        if: ${{ !matrix.app.publish_artifacts }}
        id: export-build
        shell: bash
        run: |
          mkdir -p /tmp/${{ matrix.app.name }}/build
          echo "${{ matrix.app.name }}" > "/tmp/${{ matrix.app.name }}/build/${{ matrix.app.target_os }}-${{ matrix.app.target_arch }}"

      - name: Upload Build Result
        if: ${{ !matrix.app.publish_artifacts }}
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4
        with:
          name: wfl-build-${{ matrix.app.name }}-${{ matrix.app.channel }}-${{ matrix.app.target_os }}-${{ matrix.app.target_arch }}
          path: /tmp/${{ matrix.app.name }}/*
          if-no-files-found: error
          retention-days: 1

      - name: Create archive
        if: ${{ matrix.app.publish_artifacts }}
        env:
          BINARY_NAME: ${{ matrix.app.binary_name }}
          BINARY_BUILD_OUTPUT_PATH: ${{ matrix.app.binary_build_output_path }}
        run: |
          set -oue pipefail
          set -x

          # Create archive
          if [[ ! -z $BINARY_BUILD_OUTPUT_PATH ]]; then
            BINARY_PATH=${{ matrix.app.repository }}/$BINARY_BUILD_OUTPUT_PATH
          else
            if [[ -z $BINARY_NAME ]]; then
              BINARY_PATH=$(find $(go env GOPATH)/bin | tail -n 1)
            else
              BINARY_PATH=$(find $(go env GOPATH)/bin | grep $BINARY_NAME | tail -n 1)
            fi
          fi
          chmod +x $BINARY_PATH
          mv $BINARY_PATH ${{ github.workspace }}/${{ matrix.app.name }}-${{ matrix.app.channel }}-${{ matrix.app.target_os }}-${{ matrix.app.target_arch }}

      - name: Upload Artifact
        if: ${{ matrix.app.publish_artifacts }}
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4
        with:
          name: ${{ matrix.app.name }}-${{ matrix.app.channel }}-${{ matrix.app.target_os }}-${{ matrix.app.target_arch }}
          path: ${{ github.workspace }}/${{ matrix.app.name }}-${{ matrix.app.channel }}-${{ matrix.app.target_os }}-${{ matrix.app.target_arch }}
          retention-days: 10

      - name: Setup Docker Buildx
        if: ${{ matrix.app.publish_artifacts }}
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3

      - name: Login to GitHub Container Registry
        if: ${{ matrix.app.publish_artifacts }}
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3
        with:
          registry: ghcr.io
          username: "${{ github.actor }}"
          password: "${{ secrets.GITHUB_TOKEN }}"

      - name: Setup Goss
        if: ${{ matrix.app.tests_enabled && matrix.app.publish_artifacts }}
        uses: e1himself/goss-installation-action@8c646222c1cb43528392161394b745cb5d28e8f9 # v1
        with:
          version: v0.4.4

      - name: Lowercase repository owner
        if: ${{ matrix.app.publish_artifacts }}
        shell: bash
        run: echo "LOWERCASE_REPO_OWNER=${GITHUB_REPOSITORY_OWNER,,}" >> "${GITHUB_ENV}"

      - name: Prepare Build Outputs
        if: ${{ matrix.app.publish_artifacts }}
        id: prepare-build-outputs
        shell: bash
        run: |
          image_name="ghcr.io/${{ env.LOWERCASE_REPO_OWNER }}/${{ matrix.app.name }}"
          outputs="type=image,name=${image_name},push-by-digest=true,name-canonical=true,push=true"

          echo "image_name=${image_name}" >> $GITHUB_OUTPUT
          echo "outputs=${outputs}" >> $GITHUB_OUTPUT

      - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        if: ${{ matrix.app.publish_artifacts }}
        with:
          name: ${{ matrix.app.name }}-${{ matrix.app.channel }}-${{ matrix.app.target_os }}-${{ matrix.app.target_arch }}
          path: nightly-stack/apps/${{ matrix.app.name}}

      - name: Build Image
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355 # v6
        id: build-image
        if: ${{ matrix.app.publish_artifacts }}
        with:
          build-args: |-
            BINARY=${{ matrix.app.name }}-${{ matrix.app.channel }}-${{ matrix.app.target_os }}-${{ matrix.app.target_arch }}
          context: ./nightly-stack/${{ matrix.app.context }}
          file: ./nightly-stack/${{ matrix.app.dockerfile }}
          platforms: ${{ matrix.app.target_arch }}
          outputs: ${{ steps.prepare-build-outputs.outputs.outputs }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |-
            org.opencontainers.image.title=${{ steps.prepare-build-outputs.outputs.image_name }}
            org.opencontainers.image.url=https://ghcr.io/${{ env.LOWERCASE_REPO_OWNER }}/${{ steps.prepare-build-outputs.outputs.image_name }}
            org.opencontainers.image.source=https://github.com/${{ env.LOWERCASE_REPO_OWNER }}/containers
            org.opencontainers.image.version=${{ matrix.app.channel }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.vendor=${{ env.LOWERCASE_REPO_OWNER }}
            org.opencontainers.image.authors=${{ env.LOWERCASE_REPO_OWNER }}
            org.cosmos.cosmossdk.version=${{ steps.modules_versions.outputs.cosmossdk }}
            org.cosmos.cometbft.version=${{ steps.modules_versions.outputs.cometbft }}

      - name: Run Goss Tests
        id: dgoss
        if: ${{ matrix.app.tests_enabled && matrix.app.publish_artifacts }}
        env:
          CONTAINER_RUNTIME: docker
          GOSS_FILE: ./nightly-stack/${{ matrix.app.goss_config }}
          GOSS_OPTS: --retry-timeout 60s --sleep 2s --color --format documentation
          GOSS_SLEEP: 2
          GOSS_FILES_STRATEGY: cp
          CONTAINER_LOG_OUTPUT: goss_container_log_output
        shell: bash
        run: |
          set -x
          ls -l ./nightly-stack/${{ matrix.app.goss_config }}
          image_name="${{ steps.prepare-build-outputs.outputs.image_name }}@${{ steps.build-image.outputs.digest }}"
          dgoss run ${image_name}

      - name: Export Digest
        if: ${{ matrix.app.publish_artifacts }}
        id: export-digest
        shell: bash
        run: |
          mkdir -p /tmp/${{ matrix.app.name }}/digests
          digest="${{ steps.build-image.outputs.digest }}"
          echo "${{ matrix.app.name }}" > "/tmp/${{ matrix.app.name }}/digests/${digest#sha256:}"

      - name: Upload Digest
        if: ${{ matrix.app.publish_artifacts }}
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4
        with:
          name: wfl-digest-${{ matrix.app.name }}-${{ matrix.app.channel }}-${{ matrix.app.target_os }}-${{ matrix.app.target_arch }}
          path: /tmp/${{ matrix.app.name }}/*
          if-no-files-found: error
          retention-days: 1

  merge:
    name: Merge ${{ matrix.app.name }} ${{ matrix.app.channel }}
    runs-on: ubuntu-latest
    needs: ["prepare", "build-platform-app"]
    # Always run merge, as the prior matrix is all or nothing. We test for prior step failure
    # in the "Test Failed Bit" step. This ensures if one app fails, others can still complete.
    # if: ${{ always() && inputs.pushArtifacts && toJSON(fromJSON(needs.prepare.outputs.matrices).apps) != '[]' && toJSON(fromJSON(needs.prepare.outputs.matrices).apps) != '' }}
    if: ${{ always() }}
    strategy:
      matrix:
        app: "${{ fromJSON(needs.prepare.outputs.matrices).apps }}"
      fail-fast: false
    steps:
      - name: Log Matrix Input
        shell: bash
        run: |
          cat << EOF
          ${{ toJSON(matrix.app)}}
          EOF
      - name: Set variables
        id: variables
        shell: bash
        run: |
          set -x
          echo "LOWERCASE_REPO_OWNER=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      - name: Download Build output
        if: ${{ !matrix.app.publish_artifacts }}
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          pattern: "wfl-build-${{ matrix.app.name }}-${{ matrix.app.channel }}-{linux,darwin}-{amd64,arm64}"
          merge-multiple: true
          path: /tmp/${{ matrix.app.name }}

      - name: Build - Ensure all platforms were built
        id: ensure-platforms-build
        if: ${{ !matrix.app.publish_artifacts }}
        shell: bash
        run: |
          EXPECTED_COUNT=$(cat << EOF | jq ". | length"
          ${{ toJSON(matrix.app.platforms) }}
          EOF
          )
          ACTUAL_COUNT=$(ls -1 /tmp/${{ matrix.app.name }}/build | wc -l)
          if [[ $EXPECTED_COUNT != $ACTUAL_COUNT ]]; then
              echo "Expected $EXPECTED_COUNT platforms, but only found $ACTUAL_COUNT"
              echo "Expected: ${{ toJSON(matrix.app.platforms) }}"
              echo "Actual: $(cat /tmp/${{ matrix.app.name }}/build/*)"
              exit 1
          fi
          echo "app_status=true" >> $GITHUB_ENV

      - name: Download Digests
        if: ${{ matrix.app.publish_artifacts }}
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          pattern: "wfl-digest-${{ matrix.app.name }}-${{ matrix.app.channel }}-{linux,darwin}-{amd64,arm64}"
          merge-multiple: true
          path: /tmp/${{ matrix.app.name }}

      - name: Digests - Ensure all platforms were built
        id: ensure-platforms
        if: ${{ matrix.app.publish_artifacts }}
        shell: bash
        run: |
          EXPECTED_COUNT=$(cat << EOF | jq ". | length"
          ${{ toJSON(matrix.app.platforms) }}
          EOF
          )
          ACTUAL_COUNT=$(ls -1 /tmp/${{ matrix.app.name }}/digests | wc -l)
          if [[ $EXPECTED_COUNT != $ACTUAL_COUNT ]]; then
              echo "Expected $EXPECTED_COUNT platforms, but only found $ACTUAL_COUNT"
              echo "Expected: ${{ toJSON(matrix.app.platforms) }}"
              echo "Actual: $(cat /tmp/${{ matrix.app.name }}/digests/*)"
              exit 1
          fi
      - name: Setup Docker Buildx
        if: ${{ matrix.app.publish_artifacts }}
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3

      - name: Login to GitHub Container Registry
        if: ${{ matrix.app.publish_artifacts }}
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3
        with:
          registry: ghcr.io
          username: "${{ github.actor }}"
          password: "${{ secrets.GITHUB_TOKEN }}"

      - name: Log Files
        if: ${{ matrix.app.publish_artifacts }}
        working-directory: /tmp/${{ matrix.app.name }}/digests
        shell: bash
        run: |
          ls -la
          cat *

      - name: Merge Manifests
        id: merge
        if: ${{ matrix.app.publish_artifacts }}
        working-directory: /tmp/${{ matrix.app.name }}/digests
        shell: bash
        run: |
          set -x
          docker buildx imagetools create \
              --tag ghcr.io/${{ env.LOWERCASE_REPO_OWNER }}/${{ matrix.app.name }}:${{ matrix.app.container_tag_name }} \
              $(printf 'ghcr.io/${{ env.LOWERCASE_REPO_OWNER }}/${{ matrix.app.name }}@sha256:%s ' *)
          echo "app_status=true" >> $GITHUB_ENV

      - name: Inspect image
        if: ${{ matrix.app.publish_artifacts }}
        id: inspect
        shell: bash
        run: |
          docker buildx imagetools inspect ghcr.io/${{ env.LOWERCASE_REPO_OWNER }}/${{ matrix.app.name }}:${{ matrix.app.container_tag_name }}

      - name: Build successful
        id: build-success
        if: ${{ always() && env.app_status == 'true' }}
        shell: bash
        run: |
          echo "slack_message=🎉 Nightly build ${{ matrix.app.name }} (${{ matrix.app.channel }})" >> $GITHUB_OUTPUT
          echo "slack_color=good" >> $GITHUB_OUTPUT
          echo "slack_icon_emoji=:white_check_mark:" >> $GITHUB_OUTPUT

      - name: Build failed
        id: build-failed
        if: ${{ always() && env.app_status != 'true' }}
        shell: bash
        run: |
          echo "slack_message=💥 Nightly build ${{ matrix.app.name }} (${{ matrix.app.channel }})" >> $GITHUB_OUTPUT
          echo "slack_color=danger" >> $GITHUB_OUTPUT
          echo "slack_icon_emoji=:skull:" >> $GITHUB_OUTPUT

      - name: Get previous workflow run
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        id: get-previous-run
        if: always() && (github.event_name == 'schedule' || github.ref == 'refs/heads/main')
        with:
          script: |
            const branch = context.ref.replace('refs/heads/', '');
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'nightlies-scheduled.yaml',
              branch: branch,
              status: 'completed',
              per_page: 1
            });
            return runs.data.workflow_runs[0].id;

      - name: Check specific matrix job
        id: check-matrix
        if: steps.get-previous-run.outputs.result
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            const run_id = ${{ steps.get-previous-run.outputs.result }};
            const jobs = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: run_id
            });

            const specificJob = jobs.data.jobs.find(job =>
              job.name === 'Build Images / Merge ${{ matrix.app.name }} ${{ matrix.app.channel }}'
            );

            const wasSuccessful = specificJob && specificJob.conclusion === 'success';
            console.log(`The specific matrix job was ${wasSuccessful ? 'successful' : 'not successful'}`);
            core.setOutput('was-successful', wasSuccessful);

      # - name: Notify Slack
      #   if: inputs.sendNotifications == 'true' && ((steps.check-matrix.outputs.was-successful && env.app_status != 'true') || (!steps.check-matrix.outputs.was-successful && env.app_status == 'true'))
      #   uses: rtCamp/action-slack-notify@c33737706dea87cd7784c687dadc9adf1be59990 # v2.3.2
      #   env:
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      #     SLACK_CHANNEL: nightly-stack-build
      #     SLACK_USERNAME: Nightly Builds
      #     SLACK_ICON_EMOJI: ${{ steps.build-failed.outputs.slack_icon_emoji || steps.build-success.outputs.slack_icon_emoji }}
      #     SLACK_COLOR: ${{ steps.build-failed.outputs.slack_color || steps.build-success.outputs.slack_color }}
      #     SLACK_MESSAGE: ${{ steps.build-failed.outputs.slack_message || steps.build-success.outputs.slack_message }}
      #     SLACK_FOOTER: ""

      - name: Check specific matrix job
        if: inputs.sendNotifications == 'true' && ((steps.check-matrix.outputs.was-successful && env.app_status != 'true') || (!steps.check-matrix.outputs.was-successful && env.app_status == 'true'))
        run:
          echo debug


  # Summarize matrix https://github.community/t/status-check-for-a-matrix-jobs/127354/7
  build_success:
    name: Build matrix success
    runs-on: ubuntu-latest
    needs: ["prepare", "merge"]
    if: ${{ always() }}
    steps:
      - name: Check build matrix status
        if: ${{ (inputs.appsToBuild != '' && inputs.appsToBuild != '[]') && (needs.merge.result != 'success' && needs.merge.result != 'skipped' && needs.prepare.result != 'success') }}
        shell: bash
        run: exit 1
